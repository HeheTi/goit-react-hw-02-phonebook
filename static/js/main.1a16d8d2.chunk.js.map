{"version":3,"sources":["common/Input/Input.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ItemContact/ItemContact.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/App/App.jsx","index.js"],"names":["Input","label","arg","id","nanoid","className","htmlFor","ContactForm","state","name","number","addDataForm","e","setState","target","value","onSubFormData","objData","onSubmitForm","props","resetForm","this","onSubmit","type","onChange","pattern","title","required","Component","ItemContact","onClickBtn","normalizeName","onClick","ContactList","filterName","filterContacts","map","Filter","onChangeDate","App","contacts","filter","addDataApp","split","word","firstUpCaseLetter","charAt","toUpperCase","anoterLetter","substring","join","addContacts","obj","preventDefault","some","alert","prevState","deleteContact","item","toLowerCase","includes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a16d8d2.chunk.js","sourcesContent":["import { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\n\nconst Input = ({ label, ...arg }) => {\n  const id = nanoid();\n\n  return (\n    <div className=\"wrapper-input\">\n      <label htmlFor={id}>{label}</label>\n      <input id={id} {...arg} />\n    </div>\n  );\n};\n\nInput.propTypes = {\n  label: PropTypes.string,\n  arg: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.func,\n  ]),\n};\n\nexport default Input;\n","import React, { Component } from 'react';\nimport { nanoid } from 'nanoid';\nimport Input from '../../common/Input';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  resetForm() {\n    this.setState({ name: '', number: '' });\n  }\n\n  addDataForm = e => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  onSubFormData = e => {\n    const objData = { id: nanoid(), ...this.state };\n    const { onSubmitForm } = this.props;\n\n    onSubmitForm(e, objData);\n    this.resetForm();\n  };\n\n  render() {\n    const { name, number } = this.state;\n\n    return (\n      <form onSubmit={this.onSubFormData} className=\"form\">\n        <Input\n          label=\"Name\"\n          type=\"text\"\n          name=\"name\"\n          onChange={this.addDataForm}\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n\n        <Input\n          label=\"Number\"\n          type=\"tel\"\n          name=\"number\"\n          onChange={this.addDataForm}\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n\n        <button type=\"submit\"> Add contact</button>\n      </form>\n    );\n  }\n}\n\nexport default ContactForm;\n","import PropTypes from 'prop-types';\n\nconst ItemContact = ({ name, number, onClickBtn, id, normalizeName }) => {\n  return (\n    <li className=\"item\" id={id}>\n      {normalizeName(name)}: {number}\n      <button onClick={() => onClickBtn(id)} type=\"button\">\n        Delete\n      </button>\n    </li>\n  );\n};\n\nItemContact.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\n\nexport default ItemContact;\n\n//<button onClick={onClickBtn} type=\"button\">\n","import PropTypes from 'prop-types';\nimport ItemContact from './ItemContact';\n\nconst ContactList = props => {\n  const { filterName, filterContacts, onClickBtn, normalizeName } = props;\n  return (\n    <ul className=\"list\">\n      {filterContacts(filterName).map(({ id, name, number }) => {\n        return (\n          <ItemContact\n            id={id}\n            key={id}\n            name={name}\n            number={number}\n            onClickBtn={onClickBtn}\n            normalizeName={normalizeName}\n          />\n        );\n      })}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  filterName: PropTypes.string,\n  filterContacts: PropTypes.func,\n  onClickBtn: PropTypes.func,\n  normalizeName: PropTypes.func,\n};\n\nexport default ContactList;\n","import PropTypes from 'prop-types';\nimport Input from '../../common/Input';\n\nfunction Filter({ onChangeDate, value }) {\n  return (\n    <Input\n      label=\"Find contacts by name\"\n      type=\"text\"\n      onChange={onChangeDate}\n      name=\"filter\"\n      value={value}\n    />\n  );\n}\n\nFilter.propTypes = {\n  onChangeDate: PropTypes.func,\n  value: PropTypes.string,\n};\n\nexport default Filter;\n","import React, { Component } from 'react';\n\nimport ContactForm from '../ContactForm';\nimport ContactList from '../ContactList';\nimport Filter from '../Filter';\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n\n    filter: '',\n  };\n\n  addDataApp = e => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  normalizeName = name =>\n    name\n      .split(' ')\n      .map(word => {\n        const firstUpCaseLetter = word.charAt(0).toUpperCase();\n        const anoterLetter = word.substring(1);\n        return `${firstUpCaseLetter}${anoterLetter}`;\n      })\n      .join(' ');\n\n  addContacts = (e, obj) => {\n    e.preventDefault();\n\n    const isHaveName = this.state.contacts.some(\n      ({ name }) => name === obj.name,\n    );\n\n    if (isHaveName) {\n      return alert(`${this.normalizeName(obj.name)} is alredy in contacts.`);\n    }\n\n    this.setState(prevState => {\n      return {\n        contacts: [...prevState.contacts, obj],\n      };\n    });\n  };\n\n  deleteContact = id => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(item => item.id !== id),\n    }));\n  };\n\n  filterContacts = filterName =>\n    this.state.contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filterName.toLowerCase()),\n    );\n\n  render() {\n    const { filter } = this.state;\n\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm onSubmitForm={this.addContacts} />\n\n        <h2>Contacts</h2>\n        <Filter onChangeDate={this.addDataApp} value={filter} />\n\n        <ContactList\n          normalizeName={this.normalizeName}\n          onClickBtn={this.deleteContact}\n          filterContacts={this.filterContacts}\n          filterName={filter}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// deleteContact = () => {\n//   const id = e.target.parentElement.id;\n//   this.setState(prevState => ({\n//     contacts: prevState.contacts.filter(item => item.id !== id),\n//   }));\n// };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}